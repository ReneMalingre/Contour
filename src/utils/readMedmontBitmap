import getTestXmlData from '../assets/xmlFiles/testEye';

function readMedmontBitmap() {
  let xmlString;
  let xmlDoc;
  let dataString;
  let cleanedString;

  try {
    xmlString = getTestXmlData();
  } catch (error) {
    console.error('Error loading XML data:', error);
    return;
  }

  const parser = new DOMParser();
  try {
    xmlDoc = parser.parseFromString(xmlString, 'text/xml');
  } catch (error) {
    console.error('Error parsing XML data:', error);
    return;
  }

  const bitmapElement = xmlDoc.getElementsByTagName('Bitmap')[0];
  if (!bitmapElement) {
    console.error('Bitmap element not found in XML');
    return;
  }

  try {
    dataString = bitmapElement.textContent.trim();
  } catch (error) {
    console.error('Error reading Bitmap content:', error);
    return;
  }

  // Remove newlines and extra spaces
  cleanedString = dataString.replace(/[\r\n]+/g, ' ').replace(/\s+/g, ' ');

  // Get ImageRect information
  const lowX = parseInt(
    xmlDoc
      .getElementsByTagName('BitMapImageRect')[0]
      .getElementsByTagName('Low')[0]
      .getElementsByTagName('X')[0].textContent,
  );
  const highX = parseInt(
    xmlDoc
      .getElementsByTagName('BitMapImageRect')[0]
      .getElementsByTagName('High')[0]
      .getElementsByTagName('X')[0].textContent,
  );
  console.log(`lowX: ${lowX}`);
  console.log(`highX: ${highX}`);

  return new Promise((resolve, reject) => {
    const image = new Image();
    image.onload = () => {
      // Create a canvas to crop the image
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      // Set canvas size to the desired crop size
      canvas.width = highX - lowX;
      canvas.height = image.height;

      // Draw the cropped image on the canvas
      ctx.drawImage(image, -lowX, 0);

      // Convert the canvas to a data URL and return the new image
      const croppedImage = new Image();
      croppedImage.src = canvas.toDataURL();
      resolve(croppedImage);
    };

    image.onerror = (error) => {
      console.error('Error loading image:', error);
      reject(error);
    };

    // Convert Base64 string to a data URL and set it as the source of the image
    const imageSrc = `data:image/bmp;base64,${cleanedString}`;
    image.src = imageSrc;
  });
}

export default readMedmontBitmap;
